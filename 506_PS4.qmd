---
title: "STATS 506 Problem Set 4"
author: "Snigdha Pakala"
format: html
editor: visual
---

### Link to my GitHub repository: [https://github.com/snigdhapakala/506_ProblemSet](https://github.com/snigdhapakala/506_ProblemSet3){.uri}fill this

## Problem 1

### 1a:

```{r}
install.packages("nycflights13_1.0.2.tar.gz")
library(nycflights13)
library(tidyverse)
library(dplyr)
```

```{r}
# Showing Work for 1a in this R Chunk: 

# Data in this tibble
nycflights13::flights

# Exclude those destinatios with under 10 flights:
flights_10_plus <- flights %>%
                    group_by(dest) %>%
                    filter(n() >= 10) %>%
                    summarise(flight_count = n()) %>%
                    arrange(flight_count) %>%
                    ungroup()
flights_10_plus
# 3 destinations with less than 10 flights, removed from this filtered list

# Summarize mean and median departure delays
flights_dep_stats <- flights %>%
                      group_by(dest) %>%
                        filter(n() >= 10) %>%
                      ungroup() %>%
                      group_by(origin) %>%
                        summarise(mean_dep_delay = round(mean(dep_delay, na.rm = TRUE), 1),
                                  median_dep_delay = round(median(dep_delay, na.rm = TRUE), 1)
                                  )%>%
                        arrange(desc(mean_dep_delay)) %>%
                      ungroup()

# Sanity check
row_count_origin <- flights %>% 
                    distinct(origin) # We're good!

# Display airport name and not code:

# Airport names is shown in this tibble: faa in airports has information that origin does
nycflights13::airports

airport_names <- flights_dep_stats %>%
                left_join(airports, join_by("origin" == "faa"))
```

```{r}
# Display results for 1a neatly:

# Departures tibble
departures <- flights_dep_stats %>%
              left_join(airports, join_by("origin" == "faa")) %>%
              select(name, mean_dep_delay, median_dep_delay)
#########################################################################

# Arrivals tibble: same process as above, just altogether since I know it works
arrivals <- flights %>%
            group_by(dest) %>%
              filter(n() >= 10) %>%
              summarise(mean_arr_delay = round(mean(arr_delay, na.rm = TRUE), 1),
                        median_arr_delay = round(median(arr_delay, na.rm = TRUE), 1)) %>%
              arrange(desc(mean_arr_delay)) %>%
            ungroup() %>%
            left_join(airports, join_by("dest" == "faa")) %>%
            select(name, mean_arr_delay, median_arr_delay)
```

### 1b:

```{r}
# Calculate speed since we don't have it
speed <- flights %>%
          mutate(speed_mph = distance / (air_time / 60)) %>% 
          select(distance, air_time, speed_mph) # Correct calculation!

# Model in planes tibble, left join and combine speed calc from above
fastest_plane <- flights %>%
                  mutate(speed_mph = distance / (air_time / 60)) %>% 
                  left_join(planes, join_by("tailnum" == "tailnum")) %>%
                  group_by(model) %>% # For each model, get the average speed and flight count
                    summarise(avg_speed_mph = round(mean(speed_mph, na.rm = TRUE), 1),
                              num_flights = n()) %>%
                    arrange(desc(avg_speed_mph)) %>% # Sort data by fastest speed 1st
                    slice(1) %>% # Limit output by row with largest average speed
                    select(model, avg_speed_mph, num_flights) # Only displaying relevant rows
                  ungroup()
fastest_plane
```

Answer: The aircraft model with the fastest average speed was 777-222 with 482.6 mph on average, and it took 4 flights.

## Problem 2:

```{r}

#' Title This function will provide the average temperature for a requested month
#'
#' @param month numeric 1-12 or a string
#' @param year numeric year
#' @param data dataset to obtain the data from
#' @param celsius whether temperature should be in celsius. Default is false
#' @param average_fn function with which to compute the mean. Default is mean()
#'
#' @return A numeric vector of length 1 that returns the temperature in the given month or provides an error when incorrect input is provided
#' @export
#'
#' @examples
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {

    # Check input for month is valid: numeric must be between 1 and 12, string must be correctly spelled month name 
  correct_months <- c("January", "February", "March", "April", "May", "June", 
                     "July", "August", "September", "October", "November", "December")
  correct_month_abbrs <- substr(correct_months, 1, 3)
  # If month is a string, make sure it is valid. Otherwise, if it's not numeric, or a valid number 1 through 12, error out:
  if (month %>% is.character) {
    if (month %in% correct_months) {
      month <- match(month, correct_months)  # Extract month number from month name
    } else if (month %in% correct_month_abbrs) {
      month <- match(month, correct_month_abbrs)  # Extract month number from abbreviation 
    }
  }
  else if (month %>% is.numeric) {
    if (month < 1 || month > 12) {
      stop("Month number must be between 1 and 12 to be valid.")
    }
  }
  else{
    stop("Month should be a number between 1 and 12, or a valid month name or 3-letter abbreviation.")
  }
  
  # Check input to see if year is valid: numeric and between 1997 and 2000 inclusive, since this is what we have in the data
  if (!(year %>% is.numeric)) {
    stop("Year should be a 4 digit numeric number ")
  }
  if (!(year %in% 1997:2000)) {
    stop("Data only has years 1997 through 2000. No data on temperatures outside of this range.")
  }
  
  # Seems implicit that data is nmmaps, will ignore checking this
  
  # Check celsius is either left blank or logical: check if there is an input provided by the user, and if so, ensure it is a logical
  if (!(celsius %>% is.logical()) || length(celsius) != 1) {
    stop("The 'celsius' argument must be either 'TRUE' or 'FALSE'.")
  }
  
  # Check that average_fn is a function
  if (!(average_fn %>% is.function)) {
    stop("average_fn must be a function")
  }
  
  temp_result <- data %>%
    rename(year_data = year) %>% # Was getting an error if I didn't differentiate between input year and year column in the data
    filter(year_data == !!year, month_numeric == !!month) %>%
    summarise(avg_temp = average_fn(temp))  %>%
    mutate(avg_temp = if_else(celsius, (avg_temp - 32) * (5/9), avg_temp)) %>%
    select(avg_temp) %>%
    as.numeric
  
  return(temp_result)
  
}

# Test cases to ensure it works
# get_temp("Apr", 1999, data = nnmaps)
# get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
# get_temp(10, 1998, data = nnmaps, average_fn = median)
# get_temp(13, 1998, data = nnmaps) # Errors out
# get_temp(2, 2005, data = nnmaps) # Errors out
# get_temp("November", 1999, data =nnmaps, celsius = TRUE, average_fn = function(x) {
#            x %>% sort -> x
#            x[2:(length(x) - 1)] %>% mean %>% return
#          })


```

## Problem 3

### 3a:

```{r}

```

### 3b:

```{r}

```

### 3c:

```{r}

```

### Attribution of Sources:

-   1a: <https://dplyr.tidyverse.org/reference/mutate-joins.html> Used this to figure out how to join the airport names to the flight codes, especially with using "join_by"
-   1b: <https://dplyr.tidyverse.org/reference/slice.html> using slice for limiting the rows that get outputted
-   2: <https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/match> Used this to convert month names to month counts if user entered name or abbreviation
-   2: <https://stackoverflow.com/questions/70518374/how-to-use-pipe-in-r-with-dollar-sign> the as.list helped me realize how to incorporate more piping especially when I was checking for the type of inputs
-   2: <https://www.r-bloggers.com/2019/07/bang-bang-how-to-program-with-dplyr/#google_vignette> wanted to use the bang-bang operator to pass non-standard evaluation variables into a tidyverse function, so that year and month could be evaluated as their actual values rather than being treated as literal variable names
